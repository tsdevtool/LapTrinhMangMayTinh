/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientMail;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Khanh
 */
public class frmSend extends javax.swing.JFrame {

    /**
     * Creates new form frmSend
     */
    public frmSend() {
        initComponents();
        getContentPane().setBackground(new Color(173, 216, 230));
    }
    private static final String SERVER_HOST = "localhost";
     private static final int SERVER_PORT = 1234;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcpath = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNguoinhan = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTieuDe = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNoiDung = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rabtnbcc = new javax.swing.JRadioButton();
        rabtncc = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtduongdan = new javax.swing.JTextField();
        btnchonfile = new javax.swing.JButton();
        btnthoat = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 255, 255));
        setForeground(new java.awt.Color(153, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Recipient");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Send email");

        txtNguoinhan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Title");

        txtTieuDe.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        txtNoiDung.setColumns(20);
        txtNoiDung.setRows(5);
        jScrollPane1.setViewportView(txtNoiDung);

        btnSend.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ClientMail/Image/icons8-paper-plane-30.png"))); // NOI18N
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        rabtnbcc.setText("BCC");

        rabtncc.setText("CC");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rabtnbcc)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rabtncc)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rabtncc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                .addComponent(rabtnbcc)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Path");

        txtduongdan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        btnchonfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnchonfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ClientMail/Image/icons8-attach-30.png"))); // NOI18N
        btnchonfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchonfileActionPerformed(evt);
            }
        });

        btnthoat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ClientMail/Image/icons8-export-30.png"))); // NOI18N
        btnthoat.setToolTipText("");
        btnthoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnthoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtduongdan, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btnchonfile)
                        .addGap(6, 6, 6)
                        .addComponent(btnthoat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(79, 79, 79)
                                    .addComponent(txtTieuDe))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtNguoinhan, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(27, 27, 27)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(11, 11, 11))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(230, 230, 230))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNguoinhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTieuDe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnchonfile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtduongdan, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnthoat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try {
            Socket clientSocket = new Socket(SERVER_HOST, SERVER_PORT);

            // Mở luồng gửi dữ liệu lên server
            DataOutputStream outputStream = new DataOutputStream(clientSocket.getOutputStream());

            // Gọi phương thức để gửi email
                String recipient = txtNguoinhan.getText(); // Lấy địa chỉ người nhận từ giao diện
                String subject = txtTieuDe.getText(); // Lấy tiêu đề từ giao diện
                String content = txtNoiDung.getText(); // Lấy nội dung từ giao diện

                 // Ghi các thông tin cần gửi lên server
                outputStream.writeUTF("guimail");
                outputStream.writeUTF(recipient);
                outputStream.writeUTF(subject);
                if(rabtncc.isSelected() ==  true && rabtnbcc.isSelected() == false)
                {
                    outputStream.writeUTF("CC");
                }
                if(rabtnbcc.isSelected() == true && rabtncc.isSelected()== false)
                {
                    outputStream.writeUTF("BCC");
                }
                if(rabtnbcc.isSelected() == false && rabtncc.isSelected()== false)
                {
                    outputStream.writeUTF("NO");
                }
                outputStream.writeUTF(content);
            String attachmentFilePath = txtduongdan.getText();
            if (attachmentFilePath != "") {
                sendAttachment(outputStream, attachmentFilePath);
            }
                outputStream.flush();
                // Nhận kết quả từ server
                DataInputStream inputStream = new DataInputStream(clientSocket.getInputStream());
                String response = inputStream.readUTF();
                if(response.equals("Gửi email thành công."))
                {
                    this.setVisible(false);
                    frmMailClient f = new frmMailClient();
                    f.setVisible(true);
                }
                JOptionPane.showMessageDialog(this, response);

   
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }  
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnchonfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchonfileActionPerformed
        this.fcpath.setVisible(true);

        fcpath.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (this.fcpath.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                txtduongdan.setText(fcpath.getSelectedFile().getCanonicalPath());
            } catch (Exception e) {
                {
                    JOptionPane.showMessageDialog(this, e);
                }
            }
        }
    }//GEN-LAST:event_btnchonfileActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.setVisible(false);
        frmMailClient f = new frmMailClient();
        f.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//       if(frmMailClient.nguoinhan == "")
//       {
//           txtNguoinhan.setText("");
//       }else{
           txtNguoinhan.setText(frmMailClient.nguoinhan);
      // }
       txtTieuDe.setText(frmMailClient.re);
    }//GEN-LAST:event_formWindowOpened

    private void btnthoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnthoatActionPerformed
        this.setVisible(false);
        frmMailClient f = new frmMailClient();
        f.setVisible(true);
    }//GEN-LAST:event_btnthoatActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setVisible(false);
        frmMailClient f = new frmMailClient();
        f.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void sendMailToServer(Socket clientSocket, DataOutputStream outputStream, String recipient, String subject, String content) {
    try {
        // Ghi các thông tin cần gửi lên server
        outputStream.writeUTF("guimail");
        outputStream.writeUTF(recipient);
        outputStream.writeUTF(subject);
        outputStream.writeUTF(content);
        outputStream.flush();
        
        // Nhận kết quả từ server
        DataInputStream inputStream = new DataInputStream(clientSocket.getInputStream());
        String response = inputStream.readUTF();
        JOptionPane.showMessageDialog(this, response);
    } catch (IOException e) {
        e.printStackTrace();
        // Hiển thị thông báo lỗi gửi email
        JOptionPane.showMessageDialog(this, "Lỗi khi gửi email.");
    }
}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmSend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmSend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnchonfile;
    private javax.swing.JButton btnthoat;
    private javax.swing.JFileChooser fcpath;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rabtnbcc;
    private javax.swing.JRadioButton rabtncc;
    private javax.swing.JTextField txtNguoinhan;
    private javax.swing.JTextArea txtNoiDung;
    private javax.swing.JTextField txtTieuDe;
    private javax.swing.JTextField txtduongdan;
    // End of variables declaration//GEN-END:variables

    private void sendAttachment(DataOutputStream outputStream, String attachmentFilePath) throws IOException {
        File file = new File(attachmentFilePath);

        if (file.exists()) {
            JOptionPane.showMessageDialog(this, "Attachment file be found.");
            outputStream.writeUTF("attachment"); // Indicate that an attachment is being sent
            outputStream.writeUTF(file.getName()); // Send the file name to the server

            // Before sending the attachment, inform the server about its length
            long attachmentLength = file.length();
            outputStream.writeLong(attachmentLength);

            // Send the attachment
            try (FileInputStream fileInputStream = new FileInputStream(file)) {
                byte[] buffer = new byte[4096];
                int bytesRead;

                while ((bytesRead = fileInputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
            }
        }else
        {
            outputStream.writeUTF("no_attachament");
        }
    }
    
}
